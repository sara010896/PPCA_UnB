Tarefa Prof João

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from statsmodels.stats.outliers_influence import variance_inflation_factor
from scipy.stats import shapiro
from statsmodels.stats.diagnostic import het_breuschpagan

df = pd.read_csv("AmesHousing.csv")

#Dimensões do DataFrame
print("Dimensões:", df.shape)

df.info()

# Primeiras linhas do DataFrame
df.head()

#Verificando valores faltantes
missing = df.isna().sum()
print("\nValores faltantes por coluna:")
print(missing[missing > 0])

plt.figure(figsize=(10,5))
missing[missing > 0].sort_values(ascending=False).plot.bar()
plt.title("Valores faltantes por coluna")
plt.show()

# Tratamento de dados ausentes
num_cols = df.select_dtypes(include=[np.number]).columns
cat_cols = df.select_dtypes(include=["object", "category"]).columns

# variáveis numéricas (mediana)
for col in num_cols:
    if df[col].isna().sum() > 0:
        df[col].fillna(df[col].median(), inplace=True)

# variáveis categóricas
for col in cat_cols:
    if df[col].isna().sum() > 0:
        # se o NaN representa ausência, usar "None"
        if col in ["Alley", "PoolQC", "Fence", "FireplaceQu", "MiscFeature", "GarageType", "GarageFinish", "GarageQual", "GarageCond", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "MasVnrType"]:
            df[col].fillna("None", inplace=True)
        else:
            # senão, preencher com a moda
            df[col].fillna(df[col].mode()[0], inplace=True)

#Validação do tratamento de dados ausentes
missing = df.isna().sum()
print("\nValores faltantes por coluna:")
print(missing[missing > 0])

df.info()

# Distribuição Preço de Venda
plt.figure(figsize=(8,5))
sns.histplot(df["SalePrice"], bins=40, kde=True)
plt.title("Distribuição Preço de Venda")
plt.xlabel("Preço de Venda")
plt.ylabel("Quantidade")
plt.show()

print("Preço médio:", df["SalePrice"].mean())
print("Preço mediano:", df["SalePrice"].median())

features_num = ["Gr Liv Area","Garage Cars", "Overall Qual", "TotRms AbvGrd"]
plt.figure(figsize=(6,4))
sns.scatterplot(x=df["Gr Liv Area"], y=df["SalePrice"], alpha=0.5)
plt.title("Gr Liv Area vs SalePrice")
plt.show()

  plt.figure(figsize=(6,4))
  sns.scatterplot(x=df["Garage Cars"], y=df["SalePrice"], alpha=0.5)
  plt.title("Garage Cars vs SalePrice")
  plt.show()

plt.figure(figsize=(6,4))
sns.scatterplot(x=df["Overall Qual"], y=df["SalePrice"], alpha=0.5)
plt.title(f"{"Overall Qual"} vs SalePrice")
plt.show()

plt.figure(figsize=(6,4))
sns.scatterplot(x=df["TotRms AbvGrd"], y=df["SalePrice"], alpha=0.5)
plt.title("TotRms AbvGrd vs SalePrice")
plt.show()

plt.figure(figsize=(8,6))
corr = df[features_num + ["SalePrice"]].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Matriz de Correlação")
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x="Overall Qual", y="SalePrice", data=df)
plt.title("Preço de Venda por Qualidade Geral")
plt.show()

plt.figure(figsize=(7,5))
sns.scatterplot(x=df["Gr Liv Area"], y=df["SalePrice"])
plt.title("Identificação de Outliers - Área Habitada")
plt.show()

X = df[["Overall Qual", "Gr Liv Area", "Garage Cars", "TotRms AbvGrd"]]
y = df["SalePrice"]

X = df[["Overall Qual", "Gr Liv Area", "Garage Cars", "TotRms AbvGrd"]]
y = df["SalePrice"]

print("Treino")
print(f"R²: {r2_score(y_train, y_pred_train):.3f}")
print(f"RMSE: {np.sqrt(mean_squared_error(y_train, y_pred_train)):.2f}")
print(f"MAE: {mean_absolute_error(y_train, y_pred_train):.2f}")

print("\nTeste")
print(f"R²: {r2_score(y_test, y_pred_test):.3f}")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred_test)):.2f}")
print(f"MAE: {mean_absolute_error(y_test, y_pred_test):.2f}")

coeficientes = pd.DataFrame({"Variável": X.columns, "Coeficiente": modelo.coef_})
print("\nCoeficientes")
print(coeficientes)

X_int = X.copy()
X_int["Qual_Rooms_Interaction"] = X_int["Overall Qual"] * X_int["TotRms AbvGrd"]

X_train, X_test, y_train, y_test = train_test_split(X_int, y, test_size=0.3, random_state=42)

modelo_interacao = sm.OLS(y_train, sm.add_constant(X_train)).fit()
print("\nModelo com Interação")
print(modelo_interacao.summary())

p_val = modelo_interacao.pvalues["Qual_Rooms_Interaction"]
coef = modelo_interacao.params["Qual_Rooms_Interaction"]

if p_val < 0.05:
    print(f"\nA interação é significativa (p={p_val:.3f}).")
    print(f"O coeficiente da interação é {coef:.2f}, indicando que o efeito do número de quartos depende da qualidade geral.")
else:
    print(f"\nA interação não é significativa (p={p_val:.3f}).")

X_const = sm.add_constant(X_train)
modelo_sm = sm.OLS(y_train, X_const).fit()
print("\nResumo do modelo (statsmodels):")
print(modelo_sm.summary())

residuos = modelo_sm.resid
fitted = modelo_sm.fittedvalues

stat, p_shapiro = shapiro(residuos)
print(f"\nTeste Shapiro-Wilk: stat={stat:.3f}, p={p_shapiro:.3f}")
if p_shapiro > 0.05:
    print("Resíduos seguem normalidade")
else:
    print("Resíduos não normais")

bp_test = het_breuschpagan(residuos, modelo_sm.model.exog)
labels = ['LM Stat', 'LM p-val', 'F Stat', 'F p-val']
print("\nTeste Breusch-Pagan:")
print(dict(zip(labels, bp_test)))

vif = pd.DataFrame()
vif["Variável"] = X_const.columns
vif["VIF"] = [variance_inflation_factor(X_const.values, i)
              for i in range(X_const.shape[1])]
print("\nVIF - Fator de Inflação da Variância:")
print(vif)

plt.figure(figsize=(6,4))
sns.scatterplot(x=fitted, y=residuos)
plt.axhline(0, color="red", linestyle="--")
plt.xlabel("Valores Ajustados")
plt.ylabel("Resíduos")
plt.title("Resíduos vs Ajustados")
plt.show()

sm.qqplot(residuos, line='s')
plt.title("QQ-Plot dos Resíduos")
plt.xlabel("Quantis Teóricos")
plt.ylabel("Quantis Amostrais")
plt.show()

plt.figure(figsize=(6,4))
sns.histplot(residuos, kde=True)
plt.title("Distribuição dos Resíduos")
plt.xlabel("Valores dos Resíduos")
plt.ylabel("Frequência")
plt.show()

